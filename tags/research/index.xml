<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on Yolan Romailler</title>
    <link>https://romailler.ch/tags/research/</link>
    <description>Recent content in Research on Yolan Romailler</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Yolan Romailler</copyright>
    <lastBuildDate>Mon, 25 Nov 2019 13:19:12 +0000</lastBuildDate>
    <atom:link href="https://romailler.ch/tags/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Forget Homomorphic Encryption</title>
      <link>https://romailler.ch/2019/11/25/crypto-forget_he_heres_fe/</link>
      <pubDate>Mon, 25 Nov 2019 13:19:12 +0000</pubDate>
      <guid>https://romailler.ch/2019/11/25/crypto-forget_he_heres_fe/</guid>
      <description>This is a copy of my original post on Kudelski Security&amp;rsquo;s Research Blog for my archives.&#xA;Have you ever heard of Functional Encryption (FE)? If so, you may be associating it with some sort of homomorphic encryption, which is not wrong, but not exactly right neither.&#xA;Let us see today what FE is along with a few examples, roughly how it differs from Fully Homomorphic Encryption, and how the FENTEC project is working on it!</description>
    </item>
    <item>
      <title>Defeating Ed25519 and EdDSA using a fault attack</title>
      <link>https://romailler.ch/project/eddsa-fault/</link>
      <pubDate>Thu, 05 Oct 2017 20:48:00 +0000</pubDate>
      <guid>https://romailler.ch/project/eddsa-fault/</guid>
      <description>This work was performed with my colleague Sylvain Pelissier. We demonstrated that the EdDSA signature scheme is vulnerable to single fault attacks, and mounted such an attack against the Ed25519 scheme running on an Arduino Nano board. We presented a paper on the topic at FDTC 2017, last week in Taipei.&#xA;As you all know, ECDSA is known for being the elliptic curve counterpart of the digital signature algorithm DSA. ECDSA is also notably known because of the PlayStation 3 hack in which an ECDSA private key could be retrieved because ECDSA wasn&amp;rsquo;t properly randomized.</description>
    </item>
    <item>
      <title>How (not) to break your (EC)DSA</title>
      <link>https://romailler.ch/2017/04/10/crypto-nobreak-ecdsa/</link>
      <pubDate>Mon, 10 Apr 2017 19:26:00 +0000</pubDate>
      <guid>https://romailler.ch/2017/04/10/crypto-nobreak-ecdsa/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a copy of &lt;a href=&#34;https://research.kudelskisecurity.com/2017/04/10/how-not-to-break-your-ecdsa/&#34;&gt;my original post on Kudelski Security&amp;rsquo;s Research Blog&lt;/a&gt; for my archives.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p style=&#34;text-align: justify;&#34;&gt;During an internal work project pertaining to automated cryptographic testing, I&#39;ve discovered that many implementations don&#39;t respect standard specifications, especially signature algorithms. Let us take a deeper look into it. We will mostly discuss the DSA and ECDSA algorithms and their respective domains and parameters.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: justify;&#34;&gt;It is important to know that both of those digital signature algorithms were brought to the scene by standards, respectively the &lt;a href=&#34;http://dx.doi.org/10.6028/NIST.FIPS.186-4&#34; target=&#34;_blank&#34;&gt;NIST FIPS 186&lt;/a&gt;, also known as the &#34;Digital Signature Standard&#34; and the &lt;a href=&#34;http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+X9.62%3A2005&#34; target=&#34;_blank&#34;&gt;ANSI X9.62&lt;/a&gt; (which is paywalled, but a free description is available here). Note that the FIPS 186 in its current 186-4 version also discuss ECDSA. This means that most implementers (hopefully) referred to those documents to add the algorithms to their software.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: justify;&#34;&gt;</description>
    </item>
  </channel>
</rss>
