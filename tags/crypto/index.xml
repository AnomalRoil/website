<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crypto on Yolan Romailler</title>
    <link>https://romailler.ch/tags/crypto/</link>
    <description>Recent content in Crypto on Yolan Romailler</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Yolan Romailler</copyright>
    <lastBuildDate>Wed, 18 Aug 2021 12:42:22 +0100</lastBuildDate>
    <atom:link href="https://romailler.ch/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How ephemeral keys validate possession of a static key</title>
      <link>https://romailler.ch/2021/08/18/crypto-why-ephemeral-keys/</link>
      <pubDate>Wed, 18 Aug 2021 12:42:22 +0100</pubDate>
      <guid>https://romailler.ch/2021/08/18/crypto-why-ephemeral-keys/</guid>
      <description>If you&amp;rsquo;re an applied cryptographer or a developper working on implementing key agreements, it&amp;rsquo;s very likely that you&amp;rsquo;ll stumble upon the well known NIST 800-56A rev3 &amp;ldquo;Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography&amp;rdquo; document that explains in details how to do things properly to have &amp;ldquo;secure&amp;rdquo; key establishments.&#xA;Reading between the lines In that document, in section 5.6.2.2.3.2 (I love these sub-sub-sub-sub-sub-sections) it notably says: &amp;ldquo;Recipient Obtains Assurance [of the Static Private Key] Directly from the Claimed Owner (i.</description>
    </item>
    <item>
      <title>Modulo Biases and how to avoid them!</title>
      <link>https://romailler.ch/2020/07/28/crypto-modulo_bias_guide/</link>
      <pubDate>Tue, 28 Jul 2020 23:05:02 +0100</pubDate>
      <guid>https://romailler.ch/2020/07/28/crypto-modulo_bias_guide/</guid>
      <description>This is an archived version of my original post on Kudelski Security&amp;rsquo;s Research Blog, converted to markdown.&#xA;The perpetual finding Over the last 3 years, I&amp;rsquo;ve worked on countless code reviews and if there is one vulnerability that I keep seeing over and over again, that&amp;rsquo;s definitively the modulo bias. For example, I was recently working on an audit, and did a simple search on the modulo operator in the the code base, which gave me 3 results&amp;hellip; Well, guess what?</description>
    </item>
    <item>
      <title>Forget Homomorphic Encryption</title>
      <link>https://romailler.ch/2019/11/25/crypto-forget_he_heres_fe/</link>
      <pubDate>Mon, 25 Nov 2019 13:19:12 +0000</pubDate>
      <guid>https://romailler.ch/2019/11/25/crypto-forget_he_heres_fe/</guid>
      <description>This is a copy of my original post on Kudelski Security&amp;rsquo;s Research Blog for my archives.&#xA;Have you ever heard of Functional Encryption (FE)? If so, you may be associating it with some sort of homomorphic encryption, which is not wrong, but not exactly right neither.&#xA;Let us see today what FE is along with a few examples, roughly how it differs from Fully Homomorphic Encryption, and how the FENTEC project is working on it!</description>
    </item>
    <item>
      <title>CTF Writeup / GoogleCTF 2018 / DM Collision</title>
      <link>https://romailler.ch/2018/06/30/gctf18-notdes/</link>
      <pubDate>Sat, 30 Jun 2018 23:30:00 +0200</pubDate>
      <guid>https://romailler.ch/2018/06/30/gctf18-notdes/</guid>
      <description>The challenge said:&#xA;Can you find a collision in this compression function? nc dm-col.ctfcompetition.com 1337 and gave us an attachment containing two python scripts: not_des.py and challenge.py.&#xA;Firstly, let&amp;rsquo;s have a quick peek into not_des.py: it seems to be a regular implementation of the DES cipher, but given its name, it means something has been tampered with&amp;hellip; It&amp;rsquo;s probably the S-Boxes, but we&amp;rsquo;ll be able to come back to this later.</description>
    </item>
    <item>
      <title>CTF Writeup / GoogleCTF 2018 / Perfect Secrecy</title>
      <link>https://romailler.ch/2018/06/24/gctf18-perfectrsa/</link>
      <pubDate>Sun, 24 Jun 2018 20:30:00 +0200</pubDate>
      <guid>https://romailler.ch/2018/06/24/gctf18-perfectrsa/</guid>
      <description>After having great fun last year in Google CTF with a nice RSA challenge, and a couple of strange crypto schemes, and despite the lack of enthusiasm of my fellow team members, I decided to play again this year. And the first crypto challenge I solved was also about RSA, it said:&#xA;Perfect Secrecy This crypto experiment will help you decrypt an RSA encrypted message. nc perfect-secrecy.ctfcompetition.com 1337 And it provided us an attachment, which contained a file called flag.</description>
    </item>
    <item>
      <title>Understanding and implementing Manger attack</title>
      <link>https://romailler.ch/2018/04/05/manger-explained/</link>
      <pubDate>Thu, 05 Apr 2018 15:00:00 +0200</pubDate>
      <guid>https://romailler.ch/2018/04/05/manger-explained/</guid>
      <description>The RSA cryptosystem has had its fair share of attacks over the years, but among the most impressive, you can find the infamous Bleichenbacher attack [Ble98], which doomed PKCS v1.5 in 1998. Nineteen years later, the ROBOT attack proved that the Bleichenbacher attack was still a concern today. Now, what alternatives to RSA PKCS v1.5 do we have? Well, its successor, RSA OAEP also known as RSA PKCS v2.1 is obviously a good candidate.</description>
    </item>
    <item>
      <title>CTF Writeup / Y-Not-CTF / SmS Secret Secure Server</title>
      <link>https://romailler.ch/2017/11/17/ynot17-sms/</link>
      <pubDate>Fri, 17 Nov 2017 19:00:00 +0000</pubDate>
      <guid>https://romailler.ch/2017/11/17/ynot17-sms/</guid>
      <description>&lt;p&gt;&lt;em&gt;We were given a ssh username, server ip and public key using ECDSA, along with a &lt;em&gt;very secure RNG&lt;/em&gt; python script used to generate the ECDSA key. Exploiting a weakness in the RNG, we can enumerate all possible keys and find the private key to log on the server.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>On the PGP cipher preferences</title>
      <link>https://romailler.ch/2017/10/09/misc-pgp_cipher_pref_gaffe/</link>
      <pubDate>Mon, 09 Oct 2017 05:00:42 +0000</pubDate>
      <guid>https://romailler.ch/2017/10/09/misc-pgp_cipher_pref_gaffe/</guid>
      <description>This is a copy of my original post on Kudelski Security&amp;rsquo;s Research Blog for my archives.&#xA;I recently discovered a problem that involves PGP and a symmetric cipher called Camellia. It is possible to advertise the use of Camellia in your PGP public keys through the &#34;cipher preferences&#34;, but if you do so, be aware that the official PGP software won&#39;t currently allow your correspondent to encrypt mails or files&amp;nbsp;for you.</description>
    </item>
    <item>
      <title>Defeating Ed25519 and EdDSA using a fault attack</title>
      <link>https://romailler.ch/project/eddsa-fault/</link>
      <pubDate>Thu, 05 Oct 2017 20:48:00 +0000</pubDate>
      <guid>https://romailler.ch/project/eddsa-fault/</guid>
      <description>This work was performed with my colleague Sylvain Pelissier. We demonstrated that the EdDSA signature scheme is vulnerable to single fault attacks, and mounted such an attack against the Ed25519 scheme running on an Arduino Nano board. We presented a paper on the topic at FDTC 2017, last week in Taipei.&#xA;As you all know, ECDSA is known for being the elliptic curve counterpart of the digital signature algorithm DSA. ECDSA is also notably known because of the PlayStation 3 hack in which an ECDSA private key could be retrieved because ECDSA wasn&amp;rsquo;t properly randomized.</description>
    </item>
    <item>
      <title>Yao&#39;s Garbled Circuits and how to construct those</title>
      <link>https://romailler.ch/2017/06/09/crypto-garbling_circuits/</link>
      <pubDate>Fri, 09 Jun 2017 23:22:00 +0000</pubDate>
      <guid>https://romailler.ch/2017/06/09/crypto-garbling_circuits/</guid>
      <description>I recently answered a nice question about garbled circuits, and I wanted to share my explanations. So let us review how garbled circuits actually work and how we can construct some. I&amp;rsquo;ll try to explain this from top to bottom:&#xA;The protocol Let Alice and Bob be willing to compute securely a function $f(x,y)$ (for example, it could be $f(x,y)=\min(x,y)$) while keeping their respective inputs $x$ and $y$ secret.&#xA;In order to do so, they will first model the function $f$ as a Boolean circuit, which is possible since there exists a Boolean circuit $C$ that calculates the output of $f$ for any function $f$ with fixed size inputs [1].</description>
    </item>
    <item>
      <title>CTF Writeup / PlaidCTF / Echo</title>
      <link>https://romailler.ch/2017/04/26/pctf17-echo/</link>
      <pubDate>Wed, 26 Apr 2017 19:00:00 +0000</pubDate>
      <guid>https://romailler.ch/2017/04/26/pctf17-echo/</guid>
      <description>&lt;p&gt;&lt;em&gt;We&amp;rsquo;re given a webapp performing text2speech on a maximium of 4 tweets. Exploiting an remote command injection in the dockerized script generating the audio allows to decode remotely the flag before exfiltrating it using text2speech.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>How (not) to break your (EC)DSA</title>
      <link>https://romailler.ch/2017/04/10/crypto-nobreak-ecdsa/</link>
      <pubDate>Mon, 10 Apr 2017 19:26:00 +0000</pubDate>
      <guid>https://romailler.ch/2017/04/10/crypto-nobreak-ecdsa/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a copy of &lt;a href=&#34;https://research.kudelskisecurity.com/2017/04/10/how-not-to-break-your-ecdsa/&#34;&gt;my original post on Kudelski Security&amp;rsquo;s Research Blog&lt;/a&gt; for my archives.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p style=&#34;text-align: justify;&#34;&gt;During an internal work project pertaining to automated cryptographic testing, I&#39;ve discovered that many implementations don&#39;t respect standard specifications, especially signature algorithms. Let us take a deeper look into it. We will mostly discuss the DSA and ECDSA algorithms and their respective domains and parameters.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: justify;&#34;&gt;It is important to know that both of those digital signature algorithms were brought to the scene by standards, respectively the &lt;a href=&#34;http://dx.doi.org/10.6028/NIST.FIPS.186-4&#34; target=&#34;_blank&#34;&gt;NIST FIPS 186&lt;/a&gt;, also known as the &#34;Digital Signature Standard&#34; and the &lt;a href=&#34;http://webstore.ansi.org/RecordDetail.aspx?sku=ANSI+X9.62%3A2005&#34; target=&#34;_blank&#34;&gt;ANSI X9.62&lt;/a&gt; (which is paywalled, but a free description is available here). Note that the FIPS 186 in its current 186-4 version also discuss ECDSA. This means that most implementers (hopefully) referred to those documents to add the algorithms to their software.&lt;/p&gt;&#xA;&lt;p style=&#34;text-align: justify;&#34;&gt;</description>
    </item>
    <item>
      <title>Manger&#39;s attack against RSA OAEP</title>
      <link>https://romailler.ch/2016/12/17/manger/</link>
      <pubDate>Sat, 17 Dec 2016 21:13:50 +0000</pubDate>
      <guid>https://romailler.ch/2016/12/17/manger/</guid>
      <description>Not too long ago I published on Github Go code to perform the famous Manger&amp;rsquo;s attack against RSA OAEP. This code allows us to leverage a padding Oracle in order to break RSA OAEP encryption, even though it has been mathematically proven secure&amp;hellip; How come?! may be your first reaction, but although a scheme is secure it doesn&amp;rsquo;t mean that its implementation aren&amp;rsquo;t leaking knowledge which can be leveraged to break the said scheme!</description>
    </item>
  </channel>
</rss>
